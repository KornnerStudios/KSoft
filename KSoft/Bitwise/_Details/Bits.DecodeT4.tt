<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="$(VitaSolutionFamilyBinPath)KSoft.T4.dll" #>
<#@ import namespace="KSoft.T4" #>
<#@ import namespace="KSoft.T4.Bitwise" #>
using System;
using Contracts = System.Diagnostics.Contracts;
using Contract = System.Diagnostics.Contracts.Contract;

namespace KSoft
{
	partial class Bits
	{
<# foreach (var bittable_type in BitwiseT4.BittableTypes_MajorWords) { #>
<#	var prim_keyword = bittable_type.Keyword;
	var const_keyword= bittable_type.GetConstantKeyword();
	var sign_keyword = bittable_type.SignedKeyword;
#>
		#region BitDecode <#= bittable_type.SizeOfInBits.ToString() #>
		/// <summary>Bit decode an enumeration or flags from an unsigned integer</summary>
		/// <param name="bits">Unsigned integer to decode from</param>
		/// <param name="bitIndex">Index in <paramref name="bits"/> to start decoding at</param>
		/// <param name="bitMask">Masking value for the enumeration\flags type</param>
		/// <returns>The enumeration\flags value as it stood before it was ever encoded into <paramref name="bits"/></returns>
		[Contracts.Pure]
		public static <#= prim_keyword #> BitDecode(<#= prim_keyword #> bits, int bitIndex, <#= prim_keyword #> bitMask)
		{
			Contract.Requires/*<ArgumentOutOfRangeException>*/(bitIndex >= 0);
			Contract.Requires/*<ArgumentOutOfRangeException>*/(bitIndex < k<#= const_keyword #>BitCount);
			Contract.Requires/*<ArgumentException>*/(bitMask != 0);

			return (bits >> bitIndex) & bitMask;
		}
		/// <summary>Bit decode a none-able value from an unsigned integer</summary>
		/// <param name="bits">Unsigned integer to decode from</param>
		/// <param name="bitIndex">Index in <paramref name="bits"/> to start decoding at</param>
		/// <param name="bitMask">Masking value for the enumeration\flags type</param>
		/// <returns>The enumeration\flags value as it stood before it was ever encoded into <paramref name="bits"/></returns>
		[Contracts.Pure]
		public static <#= sign_keyword #> BitDecodeNoneable(<#= prim_keyword #> bits, int bitIndex, <#= prim_keyword #> bitMask)
		{
			Contract.Requires/*<ArgumentOutOfRangeException>*/(bitIndex >= 0);
			Contract.Requires/*<ArgumentOutOfRangeException>*/(bitIndex < k<#= const_keyword #>BitCount);
			Contract.Requires/*<ArgumentException>*/(bitMask != 0);

			return (<#= sign_keyword #>)BitDecode(bits, bitIndex, bitMask) - 1;
		}
		/// <summary>Bit decode an enumeration or flags from an unsigned integer</summary>
		/// <param name="bits">Unsigned integer to decode from</param>
		/// <param name="traits"></param>
		/// <returns>The enumeration\flags value as it stood before it was ever encoded into <paramref name="bits"/></returns>
		[Contracts.Pure]
		public static <#= prim_keyword #> BitDecode(<#= prim_keyword #> bits, Bitwise.BitFieldTraits traits)
		{
			Contract.Requires/*<ArgumentException>*/(!traits.IsEmpty);

			return (bits >> traits.BitIndex) & traits.Bitmask<#= bittable_type.SizeOfInBits.ToString() #>;
		}
		/// <summary>Bit decode a none-able value from an unsigned integer</summary>
		/// <param name="bits">Unsigned integer to decode from</param>
		/// <param name="traits"></param>
		/// <returns>The enumeration\flags value as it stood before it was ever encoded into <paramref name="bits"/></returns>
		[Contracts.Pure]
		public static <#= sign_keyword #> BitDecodeNoneable(<#= prim_keyword #> bits, Bitwise.BitFieldTraits traits)
		{
			Contract.Requires/*<ArgumentException>*/(!traits.IsEmpty);

			return (<#= sign_keyword #>)BitDecode(bits, traits.BitIndex, traits.Bitmask<#= bittable_type.SizeOfInBits.ToString() #>) - 1;
		}

		/// <summary>Bit decode an enumeration or flags from an unsigned integer</summary>
		/// <param name="bits">Unsigned integer to decode from</param>
		/// <param name="bitIndex">Index in <paramref name="bits"/> to start decoding at</param>
		/// <param name="bitMask">Masking value for the enumeration\flags type</param>
		/// <returns>The enumeration\flags value as it stood before it was ever encoded into <paramref name="bits"/></returns>
		/// <remarks>On return <paramref name="bitIndex"/> is incremented by the bit count (determined from <paramref name="bitMask"/>)</remarks>
		[Contracts.Pure]
		public static <#= prim_keyword #> BitDecode(<#= prim_keyword #> bits, ref int bitIndex, <#= prim_keyword #> bitMask)
		{
			Contract.Requires/*<ArgumentOutOfRangeException>*/(bitIndex >= 0);
			Contract.Requires/*<ArgumentOutOfRangeException>*/(bitIndex < k<#= const_keyword #>BitCount);
			Contract.Requires/*<ArgumentException>*/(bitMask != 0);

			int bit_count = BitCount(bitMask);
			Contract.Assert((bitIndex + bit_count) <= Bits.k<#= const_keyword #>BitCount);

			var value = (bits >> bitIndex) & bitMask;
			bitIndex += bit_count;

			return value;
		}
		/// <summary>Bit decode a none-able value from an unsigned integer</summary>
		/// <param name="bits">Unsigned integer to decode from</param>
		/// <param name="bitIndex">Index in <paramref name="bits"/> to start decoding at</param>
		/// <param name="bitMask">Masking value for the enumeration\flags type</param>
		/// <returns>The enumeration\flags value as it stood before it was ever encoded into <paramref name="bits"/></returns>
		/// <remarks>On return <paramref name="bitIndex"/> is incremented by the bit count (determined from <paramref name="bitMask"/>)</remarks>
		[Contracts.Pure]
		public static <#= sign_keyword #> BitDecodeNoneable(<#= prim_keyword #> bits, ref int bitIndex, <#= prim_keyword #> bitMask)
		{
			Contract.Requires/*<ArgumentOutOfRangeException>*/(bitIndex >= 0);
			Contract.Requires/*<ArgumentOutOfRangeException>*/(bitIndex < k<#= const_keyword #>BitCount);
			Contract.Requires/*<ArgumentException>*/(bitMask != 0);

			return (<#= sign_keyword #>)BitDecode(bits, ref bitIndex, bitMask) - 1;
		}
		#endregion
<# } #>

		#region BitFieldExtract
<# foreach (var bittable_type in BitwiseT4.BittableTypes_MajorWords) { #>
<#	var prim_keyword = bittable_type.Keyword;
	var const_keyword= bittable_type.GetConstantKeyword();
	var size_of =      bittable_type.SizeOfInBits.ToString();
#>
		/// <summary>Extract a range of bits from an unsigned integer</summary>
		/// <param name="bits">Unsigned integer to extract from</param>
		/// <param name="bitIndexLow">Index in <paramref name="bits"/> to start extracting from</param>
		/// <param name="bitIndexHigh">Index in <paramref name="bits"/> to stop extracting at</param>
		/// <returns>Returns bits <paramref name="bitIndexLow"/> to <paramref name="bitIndexHigh"/></returns>
		[Contracts.Pure]
		public static <#= prim_keyword #> BitFieldExtractRange(<#= prim_keyword #> bits, int bitIndexLow, int bitIndexHigh)
		{
			Contract.Requires/*<ArgumentOutOfRangeException>*/(bitIndexLow >= 0 && bitIndexHigh >= 0);
			Contract.Requires/*<ArgumentOutOfRangeException>*/(bitIndexLow < k<#= const_keyword #>BitCount && bitIndexHigh < k<#= const_keyword #>BitCount);

			var shifted = bits >> bitIndexLow;								// Shift the bit field to start at the 0th bit
			var mask = BitCountToMask<#= size_of #>((bitIndexHigh-bitIndexLow) + 1);	// Generate a mask of the bit range

			return shifted & mask;
		}
		/// <summary>Extract a value represented in a bit-field</summary>
		/// <param name="bits">Unsigned integer to extract from</param>
		/// <param name="bitIndex">Index in <paramref name="bits"/> to start extracting from</param>
		/// <param name="bitCount">Number of bits representing the value to extract</param>
		/// <returns></returns>
		[Contracts.Pure]
		public static <#= prim_keyword #> BitFieldExtractValue(<#= prim_keyword #> bits, int bitIndex, int bitCount)
		{
			Contract.Requires/*<ArgumentOutOfRangeException>*/(bitIndex >= 0 && bitCount >= 0);
			Contract.Requires/*<ArgumentOutOfRangeException>*/(bitIndex < k<#= const_keyword #>BitCount);
			Contract.Requires/*<ArgumentOutOfRangeException>*/(bitIndex + (bitCount-1) < k<#= const_keyword #>BitCount);

			return BitFieldExtractRange(bits, bitIndex, bitIndex + (bitCount-1));
		}

<# } #>
		#endregion
	};
}