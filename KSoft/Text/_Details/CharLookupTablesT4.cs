using System;
using Contracts = System.Diagnostics.Contracts;
using Contract = System.Diagnostics.Contracts.Contract;

namespace KSoft.Text
{
	partial class Util
	{
		/// <summary>Latin-1 lookup table for converting char to a digit</summary>
		/// <remarks>Supports up to base 36</remarks>
		static readonly byte[] kCharToByteLookup36 = {
//	0	1	2	3	4	5	6	7	8	9	A	B	C	D	E	F	
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,// 0
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,// 1
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,// 2
//	0	1	2	3	4	5	6	7	8	9	
	0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,0x0,0x0,0x0,0x0,0x0,0x0,// 3
//	A	B	C	D	E	F	G	H	I	J	K	L	M	N	O	
	0x0,0xA,0xB,0xC,0xD,0xE,0xF,16, 17, 18, 19, 20, 21, 22, 23, 24, // 4
//	P	Q	R	S	T	U	V	W	X	Y	Z	
	25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 0x0,0x0,0x0,0x0,0x0,// 5
//	a	b	c	d	e	f	g	h	i	j	k	l	m	n	o	
	0x0,0xA,0xB,0xC,0xD,0xE,0xF,16, 17, 18, 19, 20, 21, 22, 23, 24, // 6
//	p	q	r	s	t	u	v	w	x	y	z	
	25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 0x0,0x0,0x0,0x0,0x0,// 7
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,// 8
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,// 9
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,// A
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,// B
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,// C
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,// D
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,// E
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,// F
		};

		/// <summary>Latin-1 lookup table for converting char to a digit</summary>
		/// <remarks>Supports up to base 62</remarks>
		static readonly byte[] kCharToByteLookup62 = {
//	0	1	2	3	4	5	6	7	8	9	A	B	C	D	E	F	
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,// 0
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,// 1
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,// 2
//	0	1	2	3	4	5	6	7	8	9	
	0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,0x0,0x0,0x0,0x0,0x0,0x0,// 3
//	A	B	C	D	E	F	G	H	I	J	K	L	M	N	O	
	0x0,0xA,0xB,0xC,0xD,0xE,0xF,16, 17, 18, 19, 20, 21, 22, 23, 24, // 4
//	P	Q	R	S	T	U	V	W	X	Y	Z	
	25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 0x0,0x0,0x0,0x0,0x0,// 5
//	a	b	c	d	e	f	g	h	i	j	k	l	m	n	o	
	0x0,36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, // 6
//	p	q	r	s	t	u	v	w	x	y	z	
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0x0,0x0,0x0,0x0,0x0,// 7
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,// 8
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,// 9
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,// A
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,// B
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,// C
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,// D
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,// E
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,// F
		};

		/// <summary>Latin-1 lookup table for testing if char is a digit</summary>
		/// <remarks>Supports up to base 62</remarks>
		static readonly bool[] kCharIsDigitLookup62 = {
//	0		1		2		3		4		5		6		7		8		9		A		B		C		D		E		F		
	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	// 0
	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	// 1
	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	// 2
//	0		1		2		3		4		5		6		7		8		9		
	true,	true,	true,	true,	true,	true,	true,	true,	true,	true,	false,	false,	false,	false,	false,	false,	// 3
//	A		B		C		D		E		F		G		H		I		J		K		L		M		N		O		
	false,	true,	true,	true,	true,	true,	true,	true,	true,	true,	true,	true,	true,	true,	true,	true,	// 4
//	P		Q		R		S		T		U		V		W		X		Y		Z		
	true,	true,	true,	true,	true,	true,	true,	true,	true,	true,	true,	false,	false,	false,	false,	false,	// 5
//	a		b		c		d		e		f		g		h		i		j		k		l		m		n		o		
	false,	true,	true,	true,	true,	true,	true,	true,	true,	true,	true,	true,	true,	true,	true,	true,	// 6
//	p		q		r		s		t		u		v		w		x		y		z		
	true,	true,	true,	true,	true,	true,	true,	true,	true,	true,	true,	false,	false,	false,	false,	false,	// 7
	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	// 8
	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	// 9
	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	// A
	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	// B
	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	// C
	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	// D
	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	// E
	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	// F
		};

		/// <summary>Latin-1 lookup table for converting char to a digit</summary>
		/// <remarks>Supports up to base 16</remarks>
		static readonly byte[] kCharToByteLookup16 = {
//	0	1	2	3	4	5	6	7	8	9	A	B	C	D	E	F	
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,// 0
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,// 1
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,// 2
//	0	1	2	3	4	5	6	7	8	9	
	0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,0x0,0x0,0x0,0x0,0x0,0x0,// 3
//	A	B	C	D	E	F	G	H	I	J	K	L	M	N	O	
	0x0,0xA,0xB,0xC,0xD,0xE,0xF,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,// 4
//	P	Q	R	S	T	U	V	W	X	Y	Z	
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,// 5
//	a	b	c	d	e	f	g	h	i	j	k	l	m	n	o	
	0x0,0xA,0xB,0xC,0xD,0xE,0xF,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,// 6
//	p	q	r	s	t	u	v	w	x	y	z	
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,// 7
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,// 8
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,// 9
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,// A
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,// B
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,// C
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,// D
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,// E
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,// F
		};

		/// <summary>Latin-1 lookup table for testing if char is a digit</summary>
		/// <remarks>Supports up to base 16</remarks>
		static readonly bool[] kCharIsDigitLookup16 = {
//	0		1		2		3		4		5		6		7		8		9		A		B		C		D		E		F		
	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	// 0
	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	// 1
	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	// 2
//	0		1		2		3		4		5		6		7		8		9		
	true,	true,	true,	true,	true,	true,	true,	true,	true,	true,	false,	false,	false,	false,	false,	false,	// 3
//	A		B		C		D		E		F		G		H		I		J		K		L		M		N		O		
	false,	true,	true,	true,	true,	true,	true,	false,	false,	false,	false,	false,	false,	false,	false,	false,	// 4
//	P		Q		R		S		T		U		V		W		X		Y		Z		
	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	// 5
//	a		b		c		d		e		f		g		h		i		j		k		l		m		n		o		
	false,	true,	true,	true,	true,	true,	true,	false,	false,	false,	false,	false,	false,	false,	false,	false,	// 6
//	p		q		r		s		t		u		v		w		x		y		z		
	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	// 7
	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	// 8
	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	// 9
	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	// A
	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	// B
	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	// C
	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	// D
	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	// E
	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	false,	// F
		};
	};
}