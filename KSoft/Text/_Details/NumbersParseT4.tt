<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="$(VitaSolutionFamilyBinPath)KSoft.T4.dll" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="KSoft.T4" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Contracts = System.Diagnostics.Contracts;
using Contract = System.Diagnostics.Contracts.Contract;

namespace KSoft
{
	partial class Numbers
	{
<# foreach(var num_type in NumbersT4.ParseableIntegersWordAligned) { #>
<#	var prim_keyword = num_type.Keyword;
	bool is_signed = num_type.IsSigned;
#>
		#region <#= num_type.Code #>
		static bool TryParseImpl(string s, ref <#= prim_keyword #> result, int radix, int startIndex, int length, string digits)
		{
			int pos = startIndex;
			int end = startIndex+length;
			bool success = true;

			if (radix == 16)
				if ((pos+2)<end && s[pos+0]=='0' && s[pos+1]=='x')
					pos += 2;

<#		if (NumbersT4.ParseShouldAllowLeadingWhite) { #>
			// Skip any starting whitespace, avoids s.Trim() allocations
			while(pos < end && char.IsWhiteSpace(s[pos]))
				++pos;
<#		} #>

<#		if (NumbersT4.ParseShouldUseUppercaseCheck) { #>
			bool use_upper_case_variant = object.ReferenceEquals(digits, kBase64Digits) && radix <= kBase36;
<#		} #>

<#		if (is_signed) { #>
			bool negate = false;
			// Sign support only exist for decimal and lower bases
			if (radix <= kBase10 && pos < end)
			{
				char sign = s[pos];

				negate = sign == '-';
				// Skip the sign character
				if (negate || sign == '+')
					++pos;
			}
<#		} #>

			for(var radix_in_word = (<#= prim_keyword #>)radix; pos < end && !char.IsWhiteSpace(s[pos]); ++pos)
			{
				char digit = s[pos];

<#		if (NumbersT4.ParseShouldUseUppercaseCheck) { #>
				if(use_upper_case_variant) digit = char.ToUpper(digit);
<#		} #>

				int x = digits.IndexOf(digit);
				if (x >= 0 && x < radix)
				{
					result *= radix_in_word;
					result += (<#= prim_keyword #>)x;
				}
				else // Character wasn't found in the look-up table, it is invalid
				{
					success = false;
					break;
				}
			}

<#		if (is_signed) { #>
			// Negate the result if anything was processed
			if (negate)
				result = -result;
<#		} #>

			return success;
		}
		public static bool TryParse(string s, out <#= prim_keyword #> result, int radix = kBase10, int startIndex = 0, string digits = kBase64Digits)
		{
			Contract.Requires(!string.IsNullOrEmpty(digits));
			Contract.Requires(radix >= 2 && radix <= digits.Length);
			Contract.Requires<ArgumentOutOfRangeException>(startIndex >= 0);
			result = 0;

			return s != null && startIndex < s.Length &&
				TryParseImpl(s, ref result, radix, startIndex, s.Length, digits);
		}
		public static bool TryParse(string s, out <#= prim_keyword #> result, NumeralBase radix = NumeralBase.Decimal, int startIndex = 0, string digits = kBase64Digits)
		{
			Contract.Requires(!string.IsNullOrEmpty(digits));
			Contract.Requires(IsValidLookupTable(radix, digits));
			Contract.Requires<ArgumentOutOfRangeException>(startIndex >= 0);
			result = 0;

			return s != null && startIndex < s.Length &&
				TryParseImpl(s, ref result, (int)radix, startIndex, s.Length, digits);
		}
		public static bool TryParseRange(string s, out <#= prim_keyword #> result, int startIndex, int length, NumeralBase radix = NumeralBase.Decimal, string digits = kBase64Digits)
		{
			Contract.Requires(!string.IsNullOrEmpty(digits));
			Contract.Requires(IsValidLookupTable(radix, digits));
			Contract.Requires<ArgumentOutOfRangeException>(startIndex >= 0);
			Contract.Requires<ArgumentOutOfRangeException>(length >= 0);
			result = 0;

			return s != null && startIndex+length <= s.Length &&
				TryParseImpl(s, ref result, (int)radix, startIndex, length, digits);
		}
		#endregion
<# } #>

<# foreach(var num_type in NumbersT4.ParseableIntegersSmall) { #>
<#	var prim_keyword = num_type.Keyword;
#>
		#region <#= num_type.Code #>
		static bool TryParseImpl(string s, ref <#= prim_keyword #> result, int radix, int startIndex, int length, string digits)
		{
			<#= num_type.OperationWord #> word = 0;
			bool success = false;
			if (TryParseImpl(s, ref word, radix, startIndex, length, digits) &&
				word >= <#= prim_keyword #>.MinValue && word <= <#= prim_keyword #>.MaxValue)
			{
				result = (<#= prim_keyword #>)word;
				success = true;
			}

			return success;
		}
		public static bool TryParse(string s, out <#= prim_keyword #> result, int radix = kBase10, int startIndex = 0, string digits = kBase64Digits)
		{
			Contract.Requires(!string.IsNullOrEmpty(digits));
			Contract.Requires(radix >= 2 && radix <= digits.Length);
			Contract.Requires<ArgumentOutOfRangeException>(startIndex >= 0);
			result = 0;

			return  s != null && startIndex < s.Length &&
				TryParseImpl(s, ref result, radix, startIndex, s.Length, digits);
		}
		public static bool TryParse(string s, out <#= prim_keyword #> result, NumeralBase radix = NumeralBase.Decimal, int startIndex = 0, string digits = kBase64Digits)
		{
			Contract.Requires(!string.IsNullOrEmpty(digits));
			Contract.Requires(IsValidLookupTable(radix, digits));
			Contract.Requires<ArgumentOutOfRangeException>(startIndex >= 0);
			result = 0;

			return  s != null && startIndex < s.Length &&
				TryParseImpl(s, ref result, (int)radix, startIndex, s.Length, digits);
		}
		public static bool TryParseRange(string s, out <#= prim_keyword #> result, int startIndex, int length, NumeralBase radix = NumeralBase.Decimal, string digits = kBase64Digits)
		{
			Contract.Requires(!string.IsNullOrEmpty(digits));
			Contract.Requires(IsValidLookupTable(radix, digits));
			Contract.Requires<ArgumentOutOfRangeException>(startIndex >= 0);
			Contract.Requires<ArgumentOutOfRangeException>(length >= 0);
			result = 0;

			return s != null && startIndex+length <= s.Length &&
				TryParseImpl(s, ref result, (int)radix, startIndex, length, digits);
		}
		#endregion
<# } #>

<# foreach(var num_type in PrimitiveDefinitions.Numbers) { #>
<#	if (!num_type.IsInteger) continue;
	var prim_keyword = num_type.Keyword;
#>
		#region ParseString <#= num_type.Code #>
		static bool ParseStringImpl(string s, ref <#= prim_keyword #> value, bool noThrow, int radix, int startIndex,
			Func<Exception> getInnerException)
		{
			var result = string.IsNullOrEmpty(s)
				? ParseErrorType.NoInput
				: ParseErrorType.None;

			if (result != ParseErrorType.NoInput && (startIndex < 0 || startIndex >= s.Length))
				result = ParseErrorType.InvalidStartIndex;

			if (result == ParseErrorType.None)
				result = TryParse(s, out value, radix, startIndex, kBase64Digits)
					? ParseErrorType.None
					: ParseErrorType.InvalidValue;

			if (noThrow)
				return result == ParseErrorType.None;

			return HandleParseError(result, s, startIndex, getInnerException);
		}
		public static bool ParseString(string s, ref <#= prim_keyword #> result, bool noThrow, NumeralBase radix = NumeralBase.Decimal, int startIndex = 0,
			Func<Exception> getInnerException = null)
		{
			Contract.Requires(IsValidLookupTable(radix, kBase64Digits));

			return ParseStringImpl(s, ref result, noThrow, (int)radix, startIndex, getInnerException);
		}
		#endregion
<# } #>

<# foreach(var num_type in PrimitiveDefinitions.Numbers) { #>
<#	if (!num_type.IsInteger) continue;
	var prim_keyword = num_type.Keyword;
	var prim_keyword_nullable = num_type.Keyword + "?";
	var try_parse_num_list_base_name = "TryParse" + num_type.Code + "List" + "Base";
	var try_parse_num_list_sync_name = "TryParse" + num_type.Code + "List";
	var try_parse_num_list_async_name ="TryParse" + num_type.Code + "List" + "Async";
#>
		#region TryParse list <#= num_type.Code #>
		abstract class <#= try_parse_num_list_base_name #><TListItem>
			: TryParseNumberListBase<
					<#= prim_keyword #>,
					TListItem
				>
		{
			protected <#= try_parse_num_list_base_name #>(StringListDesc desc, string values)
				: base(desc, values)
			{
			}

			static readonly Lazy<<#= prim_keyword_nullable #>[]> kEmptyResult =
				new Lazy<<#= prim_keyword_nullable #>[]>(() => new <#= prim_keyword_nullable #>[0]);

			protected override IEnumerable<<#= prim_keyword_nullable #>> EmptyResult { get {
				return kEmptyResult.Value;
			} }

			protected <#= prim_keyword_nullable #> ProcessItem(int start, int length)
			{
				var result = (<#= prim_keyword #>)0;
				bool success = TryParseImpl(mValues, ref result, (int)mDesc.Radix, start, length, mDesc.Digits);
				return success
					? result
					: (<#= prim_keyword_nullable #>)null;
			}
		};

		sealed class <#= try_parse_num_list_async_name #>
			: <#= try_parse_num_list_base_name #>< Task<<#= prim_keyword_nullable #>> >
		{
			public <#= try_parse_num_list_async_name #>(StringListDesc desc, string values)
				: base(desc, values)
			{
			}

			static <#= prim_keyword_nullable #> ProcessItemAsync(object state)
			{
				var args = (Tuple<<#= try_parse_num_list_async_name #>, int, int>)state;
				var me = args.Item1;
				return me.ProcessItem(args.Item2, args.Item3);
			}
			protected override Task<<#= prim_keyword_nullable #>> CreateItem(int start, int length)
			{
				return Task<<#= prim_keyword_nullable #>>.Factory.StartNew(
						ProcessItemAsync,
						new Tuple<<#= try_parse_num_list_async_name #>, int, int>(this, start, length)
					);
			}

			protected override IEnumerable<<#= prim_keyword_nullable #>> CreateResult()
			{
				return
					from task in mList
					select task.Result;
			}
		};
		public static IEnumerable<<#= prim_keyword_nullable #>> TryParse<#= num_type.Code #>Async(StringListDesc desc, string values)
		{
			return new <#= try_parse_num_list_async_name #>(desc, values).TryParse();
		}

		sealed class <#= try_parse_num_list_sync_name #>
			: <#= try_parse_num_list_base_name #>< <#= prim_keyword_nullable #> >
		{
			public <#= try_parse_num_list_sync_name #>(StringListDesc desc, string values)
				: base(desc, values)
			{
			}

			protected override <#= prim_keyword_nullable #> CreateItem(int start, int length)
			{
				return base.ProcessItem(start, length);
			}

			protected override IEnumerable<<#= prim_keyword_nullable #>> CreateResult()
			{
				return mList;
			}
		};
		public static IEnumerable<<#= prim_keyword_nullable #>> TryParse<#= num_type.Code #>(StringListDesc desc, string values)
		{
			return new <#= try_parse_num_list_sync_name #>(desc, values).TryParse();
		}
		#endregion
<# } #>
	};
}