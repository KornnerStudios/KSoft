<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension="cs" #>
<#@ assembly name="$(VitaSolutionFamilyBinPath)KSoft.T4.dll" #>
<#@ import namespace="KSoft.T4" #>
using System;
using Contracts = System.Diagnostics.Contracts;
using Contract = System.Diagnostics.Contracts.Contract;

namespace KSoft.IO
{
	partial class TagElementTextStream<TDoc, TCursor>
	{
		#region WriteElement impl
<# foreach (var type in TagElementStreamsT4.SerializableTypesMisc) { #>
<# if (type.Keyword == "string") continue; #>
		protected override void WriteElement(TCursor n, <#= type.Keyword #> value)
		{
<# if(type.Code==TypeCode.Char) { #>
			WriteElement(n, new string(value, 1));
<# } else if(type.Code==TypeCode.Single || type.Code==TypeCode.Double) { #>
			WriteElement(n, value.ToString("r"));
<# } else if (type.Code==TypeCode.Boolean) { #>
			WriteElement(n, value ? "true" : "false");
<# } else { #>
			WriteElement(n, value.ToString());
<# } #>
		}
<# } #>

<# foreach (var type in TagElementStreamsT4.SerializableTypesIntegers) { #>
		protected override void WriteElement(TCursor n, <#= type.Keyword #> value, NumeralBase toBase)
		{
			WriteElement(n, Numbers.ToString(value, toBase));
		}
<# } #>
		#endregion

		#region WriteAttribute
<# foreach (var type in TagElementStreamsT4.SerializableTypesMisc) { #>
		public override void WriteAttribute(string name, <#= type.Keyword #> value)
		{
<# if(type.Code==TypeCode.String) { #>
			CursorWriteAttribute(name, value);
<# } else if(type.Code==TypeCode.Char) { #>
			CursorWriteAttribute(name, new string(value, 1));
<# } else if(type.Code==TypeCode.Single || type.Code==TypeCode.Double) { #>
			CursorWriteAttribute(name, value.ToString("r"));
<# } else if (type.Code==TypeCode.Boolean) { #>
			CursorWriteAttribute(name, value ? "true" : "false");
<# } else { #>
			CursorWriteAttribute(name, value.ToString());
<# } #>
		}
<# } #>

<# foreach (var type in TagElementStreamsT4.SerializableTypesIntegers) { #>
		public override void WriteAttribute(string name, <#= type.Keyword #> value, NumeralBase toBase)
		{
			CursorWriteAttribute(name, Numbers.ToString(value, toBase));
		}
<# } #>
		#endregion
	};
}