<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension="cs" #>
<#@ assembly name="$(VitaSolutionFamilyBinPath)KSoft.T4.dll" #>
<#@ import namespace="KSoft.T4" #>
using System;
using Contracts = System.Diagnostics.Contracts;
using Contract = System.Diagnostics.Contracts.Contract;

namespace KSoft.IO
{
	partial class TagElementTextStream<TDoc, TCursor>
	{
		#region ReadElement impl
<# foreach (var type in TagElementStreamsT4.SerializableTypesMisc) { #>
		protected override void ReadElement(TCursor n, ref <#= type.Keyword #> value)
		{
<# if(type.Code==TypeCode.String) { #>
			value = GetInnerText(n);
<# } else { #>
			TagElementTextStreamUtils.ParseString(GetInnerText(n), ref value, kThrowExcept,
				mReadErrorState.GetLineInfoException);
<# } #>
		}
<# } #>

<# foreach (var type in TagElementStreamsT4.SerializableTypesIntegers) { #>
		protected override void ReadElement(TCursor n, ref <#= type.Keyword #> value, NumeralBase fromBase)
		{
			Numbers.ParseString(GetInnerText(n), ref value, kThrowExcept, fromBase,
				getInnerException: mReadErrorState.GetLineInfoException);
		}
<# } #>
		#endregion


		#region ReadAttribute
<# foreach (var type in TagElementStreamsT4.SerializableTypesMisc) { #>
		public override void ReadAttribute(string name, ref <#= type.Keyword #> value)
		{
<# if(type.Code==TypeCode.String) { #>
			value = ReadAttribute(name);
<# } else { #>
			TagElementTextStreamUtils.ParseString(ReadAttribute(name), ref value, kThrowExcept,
				mReadErrorState.GetLineInfoException);
<# } #>
		}
<# } #>

<# foreach (var type in TagElementStreamsT4.SerializableTypesIntegers) { #>
		public override void ReadAttribute(string name, ref <#= type.Keyword #> value, NumeralBase fromBase=kDefaultRadix)
		{
			Numbers.ParseString(ReadAttribute(name), ref value, kThrowExcept, fromBase,
				getInnerException: mReadErrorState.GetLineInfoException);
		}
<# } #>
		#endregion


		#region ReadElementOpt
<# foreach (var type in TagElementStreamsT4.SerializableTypesMisc) { #>
		public override bool ReadElementOpt(string name, ref <#= type.Keyword #> value)
		{
<# if(type.Code==TypeCode.String) { #>
			return (value = ReadElementOpt(name)) != null;
<# } else { #>
			return TagElementTextStreamUtils.ParseString(ReadElementOpt(name), ref value, kNoExcept,
				mReadErrorState.GetLineInfoException);
<# } #>
		}
<# } #>

<# foreach (var type in TagElementStreamsT4.SerializableTypesIntegers) { #>
		public override bool ReadElementOpt(string name, ref <#= type.Keyword #> value, NumeralBase fromBase=kDefaultRadix)
		{
			return Numbers.ParseString(ReadElementOpt(name), ref value, kNoExcept, fromBase,
				getInnerException: mReadErrorState.GetLineInfoException);
		}
<# } #>
		#endregion


		#region ReadAttributeOpt
<# foreach (var type in TagElementStreamsT4.SerializableTypesMisc) { #>
		public override bool ReadAttributeOpt(string name, ref <#= type.Keyword #> value)
		{
<# if(type.Code==TypeCode.String) { #>
			return (value = ReadAttributeOpt(name)) != null;
<# } else { #>
			return TagElementTextStreamUtils.ParseString(ReadAttributeOpt(name), ref value, kNoExcept,
				mReadErrorState.GetLineInfoException);
<# } #>
		}
<# } #>

<# foreach (var type in TagElementStreamsT4.SerializableTypesIntegers) { #>
		public override bool ReadAttributeOpt(string name, ref <#= type.Keyword #> value, NumeralBase fromBase=kDefaultRadix)
		{
			return Numbers.ParseString(ReadAttributeOpt(name), ref value, kNoExcept, fromBase,
				getInnerException: mReadErrorState.GetLineInfoException);
		}
<# } #>
		#endregion
	};
}