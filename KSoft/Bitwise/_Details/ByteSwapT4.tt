<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension="cs" #>
<#@ assembly name="$(VitaSolutionFamilyBinPath)KSoft.T4.dll" #>
<#@ import namespace="KSoft.T4" #>
<#@ import namespace="KSoft.T4.Bitwise" #>
using System;
using Contracts = System.Diagnostics.Contracts;
#if CONTRACTS_FULL_SHIM
using Contract = System.Diagnostics.ContractsShim.Contract;
#else
using Contract = System.Diagnostics.Contracts.Contract; // SHIM'D
#endif

namespace KSoft.Bitwise
{
	partial class ByteSwap
	{
<# foreach (var bittable_type in BitwiseT4.ByteSwapableIntegers) { #>
<#	var prim_keyword = bittable_type.Keyword;
	var const_keyword= bittable_type.GetConstantKeyword();
	var byte_swap_gen = bittable_type.NewByteSwapCodeGenerator(this);
	var byte_access_gen = bittable_type.NewByteAccessCodeGenerator(this);
	var overload_suffix_for_uint = bittable_type.GetOverloadSuffixForUnnaturalWord(signed: false);
	var overload_suffix_for_int = bittable_type.GetOverloadSuffixForUnnaturalWord(signed: true);
#>
<# if (bittable_type.IsUnnaturalWord) { #>
		public const int kSizeOfU<#= const_keyword #> = sizeof(byte) * <#= bittable_type.SizeOfInBytes #>;
		public const int kSizeOf<#= const_keyword #> = kSizeOfU<#= const_keyword #>;

<# } /*IsUnnaturalWord*/ #>
		#region <#= bittable_type.WordTypeNameUnsigned #>
		/// <summary>Swaps a <see cref="<#= bittable_type.Code #>" /> and returns the result</summary>
		/// <param name="value"></param>
		/// <returns></returns>
		[Contracts.Pure]
		public static <#= prim_keyword #> SwapU<#= const_keyword #>(
			<#= prim_keyword #> value)
		{
			return
<# byte_swap_gen.Generate(); #>
		}
		/// <summary>Swaps a <see cref="<#= bittable_type.Code #>" /> by reference</summary>
		/// <param name="value"></param>
		public static void Swap<#= overload_suffix_for_uint #>(
			ref <#= prim_keyword #> value)
		{
			value =
<# byte_swap_gen.Generate(); #>
		}
		/// <summary>Swaps a <see cref="<#= bittable_type.Code #>" /> at a position in a bye array</summary>
		/// <param name="buffer">source array</param>
		/// <param name="offset">offset at which to perform the byte swap</param>
		/// <returns>offset + <#= bittable_type.SizeOfInBytes #></returns>
		public static int SwapU<#= const_keyword #>(byte[] buffer, int offset)
		{
			Contract.Requires<ArgumentNullException>(buffer != null);
			Contract.Requires<ArgumentOutOfRangeException>(
				offset >= 0 && offset < buffer.Length);
			Contract.Requires<ArgumentOutOfRangeException>(
				offset+<#= bittable_type.SizeOfCode #> <= buffer.Length);

<# byte_access_gen.GenerateByteDeclarations(); #>
<# byte_access_gen.GenerateBytesFromBuffer(); #>

<# byte_access_gen.GenerateWriteBytesToBuffer(); #>

			return offset + <#= bittable_type.SizeOfCode #>;
		}
		/// <summary>Replaces <#= bittable_type.SizeOfInBytes #> bytes in an array with a integer value</summary>
		/// <param name="buffer">byte buffer</param>
		/// <param name="offset">offset in <paramref name="buffer"/> to put the new value</param>
		/// <param name="value">value to replace the buffer's current bytes with</param>
		/// <returns>offset + <#= bittable_type.SizeOfInBytes #></returns>
		/// <remarks>
		/// <paramref name="buffer"/>'s endian order is assumed to be the same as the current operating environment.
		/// Uses <see cref="BitConverter.IsLittleEndian" /> to determine <paramref name="value"/>'s byte ordering
		/// when written to the buffer
		/// </remarks>
		public static int ReplaceBytes<#= overload_suffix_for_uint #>(byte[] buffer, int offset,
			<#= prim_keyword #> value)
		{
			Contract.Requires<ArgumentNullException>(buffer != null);
			Contract.Requires<ArgumentOutOfRangeException>(
				offset >= 0 && offset < buffer.Length);
			Contract.Requires<ArgumentOutOfRangeException>(
				offset+<#= bittable_type.SizeOfCode #> <= buffer.Length);

<# byte_access_gen.GenerateByteDeclarations(); #>
			if (BitConverter.IsLittleEndian) {
<# byte_access_gen.GenerateBytesFromValue("value"); #>
			} else {
<# byte_access_gen.GenerateBytesFromValue("value", littleEndian: false); #>
			}

<# byte_access_gen.GenerateWriteBytesToBuffer(useSwapFormat: false); #>

			return offset;
		}
		#endregion

<# if (bittable_type.IsUnnaturalWord) { #>
		// TODO: verify we don't need any sign-extension magic
<# } /*IsUnnaturalWord*/ #>
		#region <#= bittable_type.WordTypeNameSigned #>
		/// <summary>Swaps a <see cref="<#= bittable_type.SignedCode #>" /> and returns the result</summary>
		/// <param name="value"></param>
		/// <returns></returns>
		[Contracts.Pure]
		public static <#= bittable_type.SignedKeyword #> Swap<#= const_keyword #>(
			<#= bittable_type.SignedKeyword #> value)
		{
			return
<# byte_swap_gen.Generate(signed: true); #>
		}
		/// <summary>Swaps a <see cref="<#= bittable_type.SignedCode #>" /> by reference</summary>
		/// <param name="value"></param>
		public static void Swap<#= overload_suffix_for_int #>(
			ref <#= bittable_type.SignedKeyword #> value)
		{
			value =
<# byte_swap_gen.Generate(signed: true); #>
		}
		/// <summary>Swaps a <see cref="<#= bittable_type.SignedCode #>" /> at a position in a bye array</summary>
		/// <param name="buffer">source array</param>
		/// <param name="offset">offset at which to perform the byte swap</param>
		/// <returns>offset + <#= bittable_type.SizeOfInBytes #></returns>
		public static int Swap<#= const_keyword #>(byte[] buffer, int offset)
		{
			return SwapU<#= const_keyword #>(buffer, offset);
		}
		/// <summary>Replaces <#= bittable_type.SizeOfInBytes #> bytes in an array with a integer value</summary>
		/// <param name="buffer">byte buffer</param>
		/// <param name="offset">offset in <paramref name="buffer"/> to put the new value</param>
		/// <param name="value">value to replace the buffer's current bytes with</param>
		/// <returns>offset + <#= bittable_type.SizeOfInBytes #></returns>
		/// <remarks><paramref name="buffer"/>'s endian order is assumed to be the same as the current operating environment</remarks>
		public static int ReplaceBytes<#= overload_suffix_for_int #>(byte[] buffer, int offset,
			<#= bittable_type.SignedKeyword #> value)
		{
			return ReplaceBytes<#= overload_suffix_for_uint #>(buffer, offset, (<#= prim_keyword #>)value);
		}
		#endregion

<# } #>
	};
}