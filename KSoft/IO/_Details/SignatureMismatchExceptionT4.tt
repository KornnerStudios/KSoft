<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="$(VitaSolutionFamilyBinPath)KSoft.T4.dll" #>
<#@ import namespace="KSoft.T4" #>
<#@ import namespace="KSoft.T4.Bitwise" #>
using System.IO;
using Contract = System.Diagnostics.Contracts.Contract;

namespace KSoft.IO
{
	partial class SignatureMismatchException
	{
		#region Stream ctors
<# foreach (var word_type in BitwiseT4.BittableTypes_Unsigned) { #>
<#	string hex_format = "\"" + word_type.ToStringHexFormat + "\"";
#>
		public SignatureMismatchException(Stream s, <#= word_type.Keyword #> expected, <#= word_type.Keyword #> found) :
			this(s.Position - <#= word_type.SizeOfInBytes #>, expected.ToString(<#= hex_format #>), found.ToString(<#= hex_format #>))
		{
			Contract.Requires(s != null);
		}

<# } #>
		#endregion

		#region EndianReader util
<# foreach (var word_type in BitwiseT4.BittableTypes_Unsigned) { #>
		public static void Assert(IO.EndianReader s, <#= word_type.Keyword #> expected)
		{
			Contract.Requires(s != null);

			var version = s.Read<#= word_type.Code #>();
			if (version != expected) throw new SignatureMismatchException(s.BaseStream,
				expected, version);
		}

<# } #>
		#endregion
	};
}