<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="$(VitaSolutionFamilyBinPath)KSoft.T4.dll" #>
<#@ import namespace="KSoft.T4" #>
<#@ import namespace="KSoft.T4.Bitwise" #>
using System.IO;
#if CONTRACTS_FULL_SHIM
using Contract = System.Diagnostics.ContractsShim.Contract;
#else
using Contract = System.Diagnostics.Contracts.Contract; // SHIM'D
#endif

namespace KSoft.IO
{
	partial class VersionMismatchException
	{
<# foreach (var word_type in BitwiseT4.BittableTypesInt32) { #>
		#region <#= word_type.Code #> ctors
		public VersionMismatchException(string dataDescription, <#= word_type.Keyword #> found)
			: base(string.Format(Util.InvariantCultureInfo, "Invalid '{0}' version '{1}'!", dataDescription, found))
		{
			Contract.Requires(!string.IsNullOrEmpty(dataDescription));
		}
		public VersionMismatchException(string dataDescription, <#= word_type.Keyword #> expected, <#= word_type.Keyword #> found)
			: base(string.Format(Util.InvariantCultureInfo, kDescFormat, dataDescription, expected, found, VersionCompareDesc(expected, found)))
		{
			Contract.Requires(!string.IsNullOrEmpty(dataDescription));
		}
		#endregion
<# } #>

		#region Stream ctors
<# foreach (var word_type in BitwiseT4.BittableTypes_Unsigned) { #>
<#	string hex_format = "\"" + word_type.ToStringHexFormat + "\"";
#>
		public VersionMismatchException(Stream s, <#= word_type.Keyword #> expected, <#= word_type.Keyword #> found) :
			this(s.Position - <#= word_type.SizeOfInBytes #>, VersionCompareDesc(expected, found), expected.ToString(<#= hex_format #>, Util.InvariantCultureInfo), found.ToString(<#= hex_format #>, Util.InvariantCultureInfo))
		{
			Contract.Requires(s != null);
		}

<# } #>
		#endregion

		#region EndianReader util
<# foreach (var word_type in BitwiseT4.BittableTypes_Unsigned) { #>
		public static void Assert(IO.EndianReader s, <#= word_type.Keyword #> expected)
		{
			Contract.Requires(s != null);

			var version = s.Read<#= word_type.Code #>();
			if (version != expected)
				throw new VersionMismatchException(s.BaseStream, expected, version);
		}

<# } #>
		#endregion
	};

	partial class VersionOutOfRangeException
	{
<# foreach (var word_type in BitwiseT4.BittableTypesInt32) { #>
		#region <#= word_type.Code #> ctors
		public VersionOutOfRangeException(string dataDescription
			, <#= word_type.Keyword #> expectedMin
			, <#= word_type.Keyword #> expectedMax
			, <#= word_type.Keyword #> found)
			: base(string.Format(Util.InvariantCultureInfo, kDescFormat, dataDescription, expectedMin, expectedMax, found, VersionCompareDesc(expectedMin, expectedMax, found)))
		{
			Contract.Requires(!string.IsNullOrEmpty(dataDescription));
		}
		#endregion
<# } #>

		#region Stream ctors
<# foreach (var word_type in BitwiseT4.BittableTypes_Unsigned) { #>
<#	string hex_format = "\"" + word_type.ToStringHexFormat + "\"";
#>
		public VersionOutOfRangeException(Stream s
			, <#= word_type.Keyword #> expectedMin
			, <#= word_type.Keyword #> expectedMax
			, <#= word_type.Keyword #> found)
			: this(s.Position - <#= word_type.SizeOfInBytes #>, VersionCompareDesc(expectedMin, expectedMax, found), expectedMin.ToString(<#= hex_format #>, Util.InvariantCultureInfo), expectedMax.ToString(<#= hex_format #>, Util.InvariantCultureInfo), found.ToString(<#= hex_format #>, Util.InvariantCultureInfo))
		{
			Contract.Requires(s != null);
		}

<# } #>
		#endregion

		#region EndianReader util
<# foreach (var word_type in BitwiseT4.BittableTypes_Unsigned) { #>
		public static <#= word_type.Keyword #> Assert(IO.EndianReader s
			, <#= word_type.Keyword #> expectedMin
			, <#= word_type.Keyword #> expectedMax)
		{
			Contract.Requires(s != null);

			var version = s.Read<#= word_type.Code #>();
			if (version < expectedMin || version > expectedMax)
				throw new VersionOutOfRangeException(s.BaseStream, expectedMin, expectedMax, version);

			return version;
		}

<# } #>
		#endregion
	};
}
