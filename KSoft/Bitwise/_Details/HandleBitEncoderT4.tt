<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension="cs" #>
<#@ assembly name="$(VitaSolutionFamilyBinPath)KSoft.T4.dll" #>
<#@ import namespace="KSoft.T4" #>
<#@ import namespace="KSoft.T4.Bitwise" #>
using System;
using Contracts = System.Diagnostics.Contracts;
using Contract = System.Diagnostics.Contracts.Contract;

namespace KSoft.Bitwise
{
	partial struct HandleBitEncoder
	{
<# foreach (var bittable_type in BitwiseT4.BittableTypes_MajorWords) { #>
<#
#>
		public HandleBitEncoder(<#= bittable_type.Keyword #> initialBits)
		{
			mBits.u64 = 0;
			mBits.u32 = 0;
			mBitIndex = 0;

			mBits.u<#= bittable_type.SizeOfInBits #> = initialBits;
		}
<# } #>

<# foreach (var bittable_type in BitwiseT4.BittableTypes_MajorWords) { #>
<#
#>
		/// <summary>Get the <#= bittable_type.SizeOfInBits #>-bit handle value</summary>
		/// <returns></returns>
		public <#= bittable_type.Keyword #> GetHandle<#= bittable_type.SizeOfInBits #>()
		{
			return mBits.u<#= bittable_type.SizeOfInBits #>;
		}
<# } #>

		#region Encode
<# foreach (var bittable_type in BitwiseT4.BittableTypes_MajorWords) { #>
<#
#>
		/// <summary>Encode an enumeration value using an enumeration encoder object</summary>
		/// <typeparam name="TEnum">Enumeration type to encode</typeparam>
		/// <param name="value">Enumeration value to encode</param>
		/// <param name="encoder">Encoder for <typeparamref name="TEnum"/> objects</param>
		public void Encode<#= bittable_type.SizeOfInBits #><TEnum>(TEnum value, EnumBitEncoder<#= bittable_type.SizeOfInBits #><TEnum> encoder)
			where TEnum : struct, IComparable, IFormattable, IConvertible
		{
			Contract.Requires<System.ArgumentNullException>(encoder != null);

			encoder.BitEncode(value, ref mBits.u64, ref mBitIndex);
		}
<# } #>

<# foreach (var bittable_type in BitwiseT4.BittableTypes_MajorWords) { #>
<#
#>
		/// <summary>Bit encode a value into this handle</summary>
		/// <param name="value">Value to encode</param>
		/// <param name="bitMask">Masking value for <paramref name="value"/></param>
		public void Encode<#= bittable_type.SizeOfInBits #>(<#= bittable_type.Keyword #> value, <#= bittable_type.Keyword #> bitMask)
		{
			Contract.Requires<System.ArgumentException>(bitMask != 0);

			Bits.BitEncodeEnum(value, ref mBits.u64, ref mBitIndex, bitMask);
		}

		/// <summary>Bit encode a none-able value into this handle</summary>
		/// <param name="value">Value to encode</param>
		/// <param name="bitMask">Masking value for <paramref name="value"/></param>
		public void EncodeNoneable<#= bittable_type.SizeOfInBits #>(<#= bittable_type.SignedKeyword #> value, <#= bittable_type.Keyword #> bitMask)
		{
			Contract.Requires<System.ArgumentException>(bitMask != 0);
			Contract.Requires<System.ArgumentOutOfRangeException>(value.IsNoneOrPositive());

			Bits.BitEncodeEnum((ulong)(value+1), ref mBits.u64, ref mBitIndex, bitMask);
		}

		/// <summary>Bit encode a value into this handle</summary>
		/// <param name="value">Value to encode</param>
		/// <param name="traits"></param>
		public void Encode<#= bittable_type.SizeOfInBits #>(<#= bittable_type.Keyword #> value, Bitwise.BitFieldTraits traits)
		{
			Contract.Requires<System.ArgumentException>(!traits.IsEmpty);

			Bits.BitEncodeEnum(value, ref mBits.u64, ref mBitIndex, traits.Bitmask<#= bittable_type.SizeOfInBits #>);
		}
		/// <summary>Bit encode a none-able value into this handle</summary>
		/// <param name="value">Value to encode</param>
		/// <param name="traits"></param>
		public void EncodeNoneable<#= bittable_type.SizeOfInBits #>(<#= bittable_type.SignedKeyword #> value, Bitwise.BitFieldTraits traits)
		{
			Contract.Requires<System.ArgumentException>(!traits.IsEmpty);
			Contract.Requires<System.ArgumentOutOfRangeException>(value.IsNoneOrPositive());

			Bits.BitEncodeEnum((ulong)(value+1), ref mBits.u64, ref mBitIndex, traits.Bitmask<#= bittable_type.SizeOfInBits #>);
		}

<# } #>
		#endregion

		#region Decode
<# foreach (var bittable_type in BitwiseT4.BittableTypes_MajorWords) { #>
<#
#>
		/// <summary>Decode an enumeration value using an enumeration encoder object</summary>
		/// <typeparam name="TEnum">Enumeration type to decode</typeparam>
		/// <param name="value">Enumeration value decoded from this handle</param>
		/// <param name="decoder">Encoder for <typeparamref name="TEnum"/> objects</param>
		public void Decode<#= bittable_type.SizeOfInBits #><TEnum>(out TEnum value, EnumBitEncoder<#= bittable_type.SizeOfInBits #><TEnum> decoder)
			where TEnum : struct, IComparable, IFormattable, IConvertible
		{
			Contract.Requires<System.ArgumentNullException>(decoder != null);

			value = decoder.BitDecode(mBits.u64, ref mBitIndex);
		}
<# } #>

<# foreach (var bittable_type in BitwiseT4.BittableTypes_MajorWords) { #>
<#
#>
		/// <summary>Bit decode a value from this handle</summary>
		/// <param name="value">Value decoded from this handle</param>
		/// <param name="bitMask">Masking value for <paramref name="value"/></param>
		public void Decode<#= bittable_type.SizeOfInBits #>(out <#= bittable_type.Keyword #> value, <#= bittable_type.Keyword #> bitMask)
		{
			Contract.Requires<System.ArgumentException>(bitMask != 0);

			value = (<#= bittable_type.Keyword #>)Bits.BitDecode(mBits.u64, ref mBitIndex, bitMask);
		}
		/// <summary>Bit decode a value from this handle</summary>
		/// <param name="value">Value decoded from this handle</param>
		/// <param name="bitMask">Masking value for <paramref name="value"/></param>
		public void DecodeNoneable<#= bittable_type.SizeOfInBits #>(out <#= bittable_type.SignedKeyword #> value, <#= bittable_type.Keyword #> bitMask)
		{
			Contract.Requires<System.ArgumentException>(bitMask != 0);

			value = (<#= bittable_type.SignedKeyword #>)Bits.BitDecodeNoneable(mBits.u64, ref mBitIndex, bitMask);
		}

		/// <summary>Bit decode a value from this handle</summary>
		/// <param name="value">Value decoded from this handle</param>
		/// <param name="traits"></param>
		public void Decode<#= bittable_type.SizeOfInBits #>(out <#= bittable_type.Keyword #> value, Bitwise.BitFieldTraits traits)
		{
			Contract.Requires<System.ArgumentException>(!traits.IsEmpty);

			value = (<#= bittable_type.Keyword #>)Bits.BitDecode(mBits.u64, ref mBitIndex, traits.Bitmask<#= bittable_type.SizeOfInBits #>);
		}
		/// <summary>Bit decode a value from this handle</summary>
		/// <param name="value">Value decoded from this handle</param>
		/// <param name="traits"></param>
		public void DecodeNoneable<#= bittable_type.SizeOfInBits #>(out <#= bittable_type.SignedKeyword #> value, Bitwise.BitFieldTraits traits)
		{
			Contract.Requires<System.ArgumentException>(!traits.IsEmpty);

			value = (<#= bittable_type.SignedKeyword #>)Bits.BitDecodeNoneable(mBits.u64, ref mBitIndex, traits.Bitmask<#= bittable_type.SizeOfInBits #>);
		}

<# } #>
		#endregion
	};
}